name: Rust Build

on:
  push:
    branches: [ "master" ]
    tags: ["v*"]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: 测试
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
      - name: 运行测试
        run: cargo test --verbose

  build:
    name: 构建 ${{ matrix.os }} (${{ matrix.target }})
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: tcping
            asset_name: tcping-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: tcping
            asset_name: tcping-linux-arm64
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: tcping
            asset_name: tcping-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: tcping
            asset_name: tcping-macos-arm64
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: tcping.exe
            asset_name: tcping-windows-amd64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: tcping.exe
            asset_name: tcping-windows-arm64

    steps:
      - uses: actions/checkout@v4
      
      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 安装依赖（Linux ARM64）
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: 构建
        run: cargo build --release --target ${{ matrix.target }}

      - name: 上传构建物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          if-no-files-found: error

  release:
    name: 创建发布版本
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建物
        uses: actions/download-artifact@v4

      - name: 显示所有构建物
        run: ls -R

      - name: 创建发布版本
        uses: softprops/action-gh-release@v1
        with:
          files: |
            tcping-linux-amd64/tcping
            tcping-linux-arm64/tcping
            tcping-macos-amd64/tcping
            tcping-macos-arm64/tcping
            tcping-windows-amd64/tcping.exe
            tcping-windows-arm64/tcping.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
